
ifndef __mk_compilation_included
__mk_compilation_included := true

include $(dir $(lastword $(MAKEFILE_LIST)))mk.base


#-- set/modify public definitions --

mk_PARAMETERS   += BUILD_MODE CFG ARCH TAG BUILD_DIR OUT_TYPE OUT_DIR OUT_NAME OUT_FILE_NAME OUT_FILE OUT_UMASK
mk_TAG_CLASSES  += BUILD_MODE CFG ARCH
mk_TARGET_list  += depend clean $(TARGETS)
mk_FILE_TYPES   += 
mk_OUTPUT_DIRS  += $(mk_BUILD_DIR) $(mk_OUT_DIR)
#mk_SUB_LIBS     += $(__sub_libraries)

DEPS_           ?= .mk.deps
mk_DEPS          = $(mk_BUILD_DIR)/$(DEPS_)

mk_OUT_TYPE_list   += static shared exe
mk_ARCH_list       +=
mk_CFG_list         = $(CONFIGURATIONS)
mk_FILE_PATTERNS    = $(sort $(FILE_PATTERNS) $(mk_FILE_TYPES:%=*.%))
mk_FILE_PATTERNS_RE = $(sort $(FILE_PATTERNS_RE))
mk_TAG_list         = $(filter-out BUILD_MODE,$(mk_TAG_CLASSES))
mk_TAG_CLASS_list   = $(sort $(mk_TAG_CLASSES) mk_ANY)

mk_tagged           = $(subst \\, ,$(strip $(foreach c,$(mk_TAG_CLASS_list),$(call mk_var,$1.$($c)))))
mk_effective        = $(strip $(or $(call mk_tagged,$(notdir $2)),$(call mk_tagged,$1),$($1)))
mk_fileType_opts    = $(call mk_pattern_opts,mk_FILE_PATTERNS,$1) $(call mk_patternRE_opts,mk_FILE_PATTERNS_RE,$1)
mk_object_of        = $(patsubst %,$(mk_BUILD_DIR)/%.o,$(notdir $(basename $(1))))
mk_pkg_args         = CFG=$(mk_CFG) ARCH=$(mk_ARCH) OUT_NAME=$(notdir $1) OUT_DIR="$(abspath $(mk_BUILD_DIR))"

any_source          = $(foreach t,$(mk_FILE_TYPES),$(wildcard *.$(t)))
any_source_in       = $(foreach t,$(mk_FILE_TYPES),$(wildcard $(1)/*.$(t)))
scan_source         = $(foreach d,$(mk_SOURCE_DIRS),$(call any_source_in,$d))
svn_revision       := $(shell svn info | sed -ne 's/^Revision: //p')
svn_modified       := $(shell svn st | grep "^M " | awk '{print $$NF}')
svn_modified_tab    = $(call mk_join,\\\n,$(svn_modified))


#-- user parameters --

CONFIGURATIONS     ?= debug release
debug_doc          ?= shortcut target for building with debug options. Equivalent to: "make built CFG=debug"
release_doc        ?= shortcut target for building with optimization and without debug options. Equivalent to: "make built CFG=release"

ARCH               ?= $(firstword $(mk_ARCH_list))
ARCH_doc           ?= architecture id: {$(call mk_csv,$(mk_ARCH_list))}
mk_ARCH             = $(call mk_effective,ARCH)

CFG                ?= $(firstword $(mk_CFG_list))
CFG_doc            ?= name of build configuration: {$(call mk_csv,$(mk_CFG_list))}
mk_CFG              = $(CFG)

TAG                ?= $(subst $(mk_SPACE),.,$(foreach t,$(mk_TAG_list),$($t)))
TAG_doc            ?= string for tagging build directory. default: $(subst $(mk_SPACE),.,$(mk_TAG_list))
mk_TAG              = $(call mk_effective,TAG)

BUILD_MODE         ?= $(mk_OUT_TYPE)
BUILD_MODE_doc     ?= mode for building object files: {$(call mk_csv,$(mk_OUT_TYPE_list))}
mk_BUILD_MODE       = $(call mk_effective,BUILD_MODE)

BUILD_DIR          ?= $(mk_TAG).$(mk_BUILD_MODE)
BUILD_DIR_doc      ?= working directory for building object files. default: <TAG>.<BUILD_MODE>
mk_BUILD_DIR        = built/$(call mk_effective,BUILD_DIR)

OUT_TYPE           ?= $(firstword $(mk_OUT_TYPE_list))
OUT_TYPE_doc       ?= type of built binary: {$(call mk_csv,$(mk_OUT_TYPE_list))}
mk_OUT_TYPE         = $(OUT_TYPE)# $(call mk_effective,OUT_TYPE)

OUT_DIR            ?= $(mk_BUILD_DIR)
OUT_DIR_doc        ?= output directory for putting the output file(s)
mk_OUT_DIR          = $(call mk_effective,OUT_DIR)

OUT_NAME           ?= outname
OUT_NAME_doc       ?= the base name of the final result
mk_OUT_NAME         = $(call mk_effective,OUT_NAME)

OUT_FILE_NAME      ?= $(__out_file_name)
OUT_FILE_NAME_doc  ?= the file name of the final result
mk_OUT_FILE_NAME    = $(call mk_effective,OUT_FILE_NAME)
mk_OUT_FILE_NAME_SO = $(call mk_effective,OUT_FILE_NAME)$(mk_MAYOR)$(mk_MINOR)

OUT_FILE           ?= $(mk_OUT_DIR)/$(mk_OUT_FILE_NAME)
OUT_FILE_doc       ?= path and file name of the final result
mk_OUT_FILE         = $(call mk_effective,OUT_FILE)
mk_OUT_FILE_SO      = $(call mk_effective,OUT_FILE)$(mk_MAYOR)$(mk_MINOR)

OUT_UMASK_doc      ?= the umask to set for the final output file
mk_OUT_UMASK        = $(call mk_effective,OUT_UMASK)

MAYOR              ?= 0
MAYOR_doc          ?= mayor version number
mk_MAYOR            = $(if $(MAYOR),.$(MAYOR),)

MINOR              ?= $(svn_revision)
MINOR_doc          ?= minor version number, e.g. svn revision
mk_MINOR            = $(if $(MINOR),.$(MINOR),)

SOURCE_FILES       += $(scan_source)
mk_SOURCE_DIRS      = $(call mk_effective,SOURCE_DIRS)
mk_SOURCE_FILES     = $(call mk_effective,SOURCE_FILES)
mk_IGNORE_FILES     = $(call mk_effective,IGNORE_FILES)
mk_SUB_PACKAGES     = $(call mk_effective,SUB_PACKAGES)
mk_PKG_LIBRARIES    = $(patsubst %,%.$(mk_TAG),$(notdir $(mk_SUB_PACKAGES)))

mk_BINARY_TAG       = $(call mk_effective,BINARY_TAG)
mk_BINARY_TAG_len   = $(call mk_lines,$(mk_BINARY_TAG))
mk_BINARY_TAG_frame = $(if $(mk_BINARY_TAG),\
                           \n $(mk_BINARY_TAG)                       \n\
                           tail -$(call plus,$(mk_BINARY_TAG_len),2) \n\
                           head -$(mk_BINARY_TAG_len)\n,)


#-- targets --

.DEFAULT_GOAL = help
.DELETE_ON_ERROR:

.PHONY: $(mk_TARGET_list) $(mk_CFG_list) built depend

built: depend
	# make subpackages here!?
	@$(MAKE) DEPS_=$(mk_DEPS) OUT_='$(mk_OUT_FILE)' DIRS_='$(mk_OUTPUT_DIRS)' OBJ_='$(mk_OBJECTS)' $(mk_OUT_FILE)

depend_doc = build dependency list in $(mk_DEPS)
depend:
	@#-- evaluate auto-depend
	@$(MAKE) --quiet $(__source_files) $(dir $(mk_DEPS))
	@$(mk_echo) '=====\nstarted build @ '`date`'\n=====' > $(mk_LOG_FILE)
	$(foreach cmd,$(cmd_depends),$(call $(cmd),$(mk_DEPS),$(__source_files)))

$(OUT_): $(OBJ_)
	$(call mk_logged_cmd,$(cmd_LINK))
	@if [ -e "$(OUT_)" ]; then                                 \
		$(mk_echo) tagging binary ...                           ;\
		$(mk_echo) -n '$(mk_BINARY_TAG_frame)' | tee -a $(OUT_) ;\
		$(mk_echo) \\nbuilt successful                          ;\
		if [ -n "$(mk_OUT_UMASK)" ]; then                        \
			chmod $(mk_OUT_UMASK) $(OUT_)                         ;\
		fi                                                      ;\
	fi
	
$(OBJ_): | $(sort $(DIRS_:%=%\/))

$(mk_CFG_list):
	@$(MAKE) CFG=$@ built

clean_doc = clear build directory [$(mk_BUILD_DIR)] by removing object files
clean:
	@rm -f $(mk_OBJECTS) $(mk_LOG_FILE) $(mk_DEPS) $(CLEARED_FILES)
	@$(foreach p,$(mk_SUB_PACKAGES),$(shell $(MAKE) -C $p $(call mk_pkg_args,$p) clean))

#-- set/derive private variables/lists --

__out_file_name_static = lib$(1).a
__out_file_name_shared = lib$(1).so
__out_file_name_exe    = $(1)
__out_file_name_of     = $(call __out_file_name_$2,$1)
__out_file_name        = $(call __out_file_name_of,$(mk_OUT_NAME).$(mk_TAG),$(mk_OUT_TYPE))

__source_files    = $(filter-out $(mk_IGNORE_FILES),$(mk_SOURCE_FILES))
__source_dirs     = $(sort $(dir $(__source_files)))
mk_OBJECTS        = $(call mk_object_of,$(__source_files))

VPATH = $(subst $(mk_SPACE),:,$(__source_dirs))

sinclude $(DEPS_)

endif # __mk_compilation_included

