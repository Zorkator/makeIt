
#-- set/modify public definitions --

mk_PARAMETERS   += BUILD_MODE CFG ARCH TAG BUILD_DIR OUT_TYPE OUT_DIR OUT_NAME OUT_FILE_NAME OUT_FILE
mk_TAG_CLASSES  += BUILD_MODE CFG ARCH
mk_TARGETS      += clean $(mk_CFG_list)
mk_FILE_TYPES   += 
mk_OUTPUT_DIRS  += $(mk_BUILD_DIR) $(mk_OUT_DIR)
#mk_SUB_LIBS     += $(__sub_libraries)
mk_DEPS         := .mk.deps
cmd_FINALIZE    := @echo '\>> done'

mk_OUT_TYPE_list   += static shared exe
mk_ARCH_list       +=
mk_CFG_list         = $(CONFIGURATIONS)
mk_TAG_list         = $(filter-out BUILD_MODE,$(mk_TAG_CLASSES))
mk_TAG_CLASS_list   = $(sort $(mk_TAG_CLASSES) mk_ANY)

mk_tagged           = $(subst \\, ,$(strip $(foreach c,$(mk_TAG_CLASS_list),$(call mk_var,$1.$($c)))))
mk_effective        = $(or $(call mk_tagged,$(notdir $2)),$(call mk_tagged,$1),$($1))
mk_object_of        = $(patsubst %,$(mk_BUILD_DIR)/%.o,$(notdir $(basename $(1))))
mk_pkg_args         = CFG=$(mk_CFG) ARCH=$(mk_ARCH) OUT_NAME=$(notdir $1) OUT_DIR="$(abspath $(mk_BUILD_DIR))"

any_source          = $(foreach t,$(mk_FILE_TYPES),$(wildcard *.$(t)))
any_source_in       = $(foreach t,$(mk_FILE_TYPES),$(wildcard $(1)/*.$(t)))
scan_source         = $(foreach d,$(mk_SOURCE_DIRS),$(call any_source_in,$d))
svn_revision       := `svn info | sed -ne 's/^Revision: //p'`


#-- user parameters --

CONFIGURATIONS     ?= debug release
debug_doc          ?= target for building with debug options
release_doc        ?= target for building with optimization and without debug options

ARCH               ?= $(firstword $(mk_ARCH_list))
ARCH_doc           ?= architecture id: {$(call mk_csv,$(mk_ARCH_list))}
mk_ARCH             = $(call mk_effective,ARCH)

CFG                ?= $(firstword $(mk_CFG_list))
CFG_doc            ?= name of build configuration: {$(call mk_csv,$(mk_CFG_list))}
mk_CFG              = $(CFG)

TAG                ?= $(subst $(mk_SPACE),.,$(foreach t,$(mk_TAG_list),$($t)))
TAG_doc            ?= string for tagging build directory. default: $(subst $(mk_SPACE),.,$(mk_TAG_list))
mk_TAG              = $(call mk_effective,TAG)

BUILD_MODE         ?= $(mk_OUT_TYPE)
BUILD_MODE_doc     ?= mode for building object files: {$(call mk_csv,$(mk_OUT_TYPE_list))}
mk_BUILD_MODE       = $(call mk_effective,BUILD_MODE)

BUILD_DIR          ?= $(mk_TAG).$(mk_BUILD_MODE)
BUILD_DIR_doc      ?= working directory for building object files. default: <TAG>.<BUILD_MODE>
mk_BUILD_DIR        = $(call mk_effective,BUILD_DIR)

OUT_TYPE           ?= $(firstword $(mk_OUT_TYPE_list))
OUT_TYPE_doc       ?= type of built binary: {$(call mk_csv,$(mk_OUT_TYPE_list))}
mk_OUT_TYPE         = $(OUT_TYPE)# $(call mk_effective,OUT_TYPE)

OUT_DIR            ?= $(mk_BUILD_DIR)
OUT_DIR_doc        ?= output directory for putting the output file(s)
mk_OUT_DIR          = $(call mk_effective,OUT_DIR)

OUT_NAME           ?= outname
OUT_NAME_doc       ?= the base name of the final result
mk_OUT_NAME         = $(call mk_effective,OUT_NAME)

OUT_FILE_NAME      ?= $(__out_file_name)
OUT_FILE_NAME_doc  ?= the file name of the final result
mk_OUT_FILE_NAME    = $(call mk_effective,OUT_FILE_NAME)
mk_OUT_FILE_NAME_SO = $(call mk_effective,OUT_FILE_NAME)$(mk_MAYOR)$(mk_MINOR)

OUT_FILE           ?= $(mk_OUT_DIR)/$(mk_OUT_FILE_NAME)
OUT_FILE_doc       ?= path and file name of the final result
mk_OUT_FILE         = $(call mk_effective,OUT_FILE)
mk_OUT_FILE_SO      = $(call mk_effective,OUT_FILE)$(mk_MAYOR)$(mk_MINOR)

MAYOR              ?= 0
MAYOR_doc          ?= mayor version number
mk_MAYOR            = $(if $(MAYOR),.$(MAYOR),)

MINOR              ?= $(svn_revision)
MINOR_doc          ?= minor version number, e.g. svn revision
mk_MINOR            = $(if $(MINOR),.$(MINOR),)

SOURCE_FILES       ?= $(scan_source)
mk_SOURCE_DIRS      = $(call mk_effective,SOURCE_DIRS)
mk_SOURCE_FILES     = $(call mk_effective,SOURCE_FILES)
mk_IGNORE_FILES     = $(call mk_effective,IGNORE_FILES)
mk_SUB_PACKAGES     = $(call mk_effective,SUB_PACKAGES)
mk_PKG_LIBRARIES    = $(patsubst %,%.$(mk_TAG),$(notdir $(mk_SUB_PACKAGES)))

#-- targets --

.PHONY: $(mk_TARGETS) default prepare

default: $(mk_DEPS)
	$(foreach p,$(mk_SUB_PACKAGES),$(shell $(MAKE) -C $p $(call mk_pkg_args,$p)))
	$(MAKE) $(mk_OUT_FILE)

$(mk_DEPS):
	#-- evaluate auto-depends
	$(shell $(mk_echo) 'dep_BUILD_DIR = $(mk_BUILD_DIR)' > $(mk_DEPS))
	@$(__mk_link_target)
	@$(__mk_type_rules)
	#@$(__ mk_object_deps)
	#@$(__ mk_prio_deps)
	@python misc/fort_depend.py -o $@ -f $(__source_files) -w
	

$(mk_CFG_list):
	$(MAKE) CFG=$@


clean_doc = clear build directory [$(mk_BUILD_DIR)] by removing object files
clean:
	@rm -f $(mk_OBJECTS) $(LOG_FILE) $(mk_DEPS)
	@$(foreach p,$(mk_SUB_PACKAGES),$(shell $(MAKE) -C $p $(call mk_pkg_args,$p) clean))


#-- set/derive private variables/lists --

__out_file_name_static = lib$(1).a
__out_file_name_shared = lib$(1).so
__out_file_name_exe    = $(1)
__out_file_name_of     = $(call __out_file_name_$2,$1)
__out_file_name        = $(call __out_file_name_of,$(mk_OUT_NAME).$(mk_TAG),$(mk_BUILD_MODE))

__logged_cmd      = @echo $(filter-out ,$(cmd_$1)) $(cmd_LOG) && $(cmd_$1) $(cmd_LOG)
__tpl_link_tgt    = $(mk_OUT_FILE): $(mk_OBJECTS)\n\t$(call __logged_cmd,LINK)\n\t$(cmd_FINALIZE)
__tpl_dirs_tgt    = $(mk_OBJECTS): | $(sort $(mk_OUTPUT_DIRS:%=%\/))
__tpl_rule        = $(dep_BUILD_DIR)/%.o: [d]%.[t]\n\t$(call __logged_cmd,COMPILE.[t])
__rule_of         = $(subst [d],$1,$(subst [t],$2,$(value __tpl_rule)))

__echo_rule_of    = $(shell $(mk_echo) '$(call __rule_of,$1,$2)' >> $3)
__echo_obj_dep_of = $(shell echo '$(call mk_object_of,$1): $1' >> $2)

__mk_link_target  = $(shell $(mk_echo) '$(value __tpl_link_tgt)\n$(value __tpl_dirs_tgt)' >> $(mk_DEPS))
__mk_object_deps  = $(foreach f,$(__source_files),$(call __echo_obj_dep_of,$f,$(mk_DEPS)))
__mk_type_rules   = $(foreach t,$(mk_FILE_TYPES),$(call __echo_rule_of,,$t,$(mk_DEPS)))

__source_files    = $(filter-out $(mk_IGNORE_FILES),$(mk_SOURCE_FILES))
__source_dirs     = $(sort $(dir $(__source_files)))
mk_OBJECTS        = $(call mk_object_of,$(__source_files))

#__mk_head      = $(and $(word 1,$1),$(word 2,$1))
#__mk_tail      = $(wordlist 2,$(words $1),$1)
#__mk_pair      = $(call mk_object_of,$(word 2,$1)): $(word 2,$1) $(call mk_object_of,$(word 1,$1))
#__mk_list      = $(if $(__mk_head),$(shell $(mk_echo) '$(call __mk_list, $(__mk_tail))$(call __mk_pair,$1)' >> $(mk_DEPS)),)
#__mk_prio_deps = $(call __mk_list,$(mk_PRIO_SOURCE))

#__sub_libraries   = $(foreach p,$(mk_SUB_PACKAGES),lib$(p).$(TAG))
#__tpl_rule_subpkg = $(OUT_DIR)/[pkg]:\n\t$(MAKE) 

VPATH = $(subst $(mk_SPACE),:,$(__source_dirs))

include $(MAKEIT_DIR)/mk.base
include $(MAKEIT_DIR)/mk.log

