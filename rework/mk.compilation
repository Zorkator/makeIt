
#-- set/modify public definitions --

mk_PARAMETERS     += CMPL TYPE ARCH CFG TAG BUILD_DIR OUT_DIR OUT_NAME OUT_FILE_NAME OUT_FILE
mk_BUILD_CLASSES  += CMPL TYPE ARCH CFG
mk_TARGETS        += clean $(CONFIGURATIONS)
mk_FILE_TYPES     += 
mk_TYPES          += exe static shared
mk_OUTPUT_DIRS    += $(BUILD_DIR)

mk_evalClasses     = $(foreach c,$(sort $(mk_BUILD_CLASSES)),$($(1).$($(c))))


#-- user parameters --

CONFIGURATIONS     ?= debug release
debug_doc          ?= target for building with debug options
release_doc        ?= target for building with optimization and without debug options

CMPL               ?= $(firstword $(mk_COMPILERS))
CMPL_doc           ?= name of compiler: {$(call mk_csv,$(mk_COMPILERS))}

TYPE               ?= $(firstword $(mk_TYPES))
TYPE_doc           ?= build type: {$(call mk_csv,$(mk_TYPES))}

ARCH               ?= $(firstword $(mk_ARCHITECTURES))
ARCH_doc           ?= architecture id: {$(call mk_csv,$(mk_ARCHITECTURES))}

CFG                ?= $(firstword $(CONFIGURATIONS))
CFG_doc            ?= name of build configuration: {$(call mk_csv,$(CONFIGURATIONS))}

TAG                ?= $(CMPL).$(TYPE).$(ARCH).$(CFG)
TAG_doc            ?= string for tagging build directory. default: <CMPL>.<TYPE>.<ARCH>.<CFG>

BUILD_DIR          ?= $(TAG)
BUILD_DIR_doc      ?= working directory for building object files. default: <TAG>

OUT_DIR            ?= $(BUILD_DIR)
OUT_DIR_doc        ?= output directory for putting the output file(s)

OUT_NAME           ?= outname
OUT_NAME_doc       ?= the base name of the final result

OUT_FILE_NAME      ?= $(__out_file_name)
OUT_FILE_NAME_doc  ?= the file name of the final result

OUT_FILE           ?= $(OUT_DIR)/$(OUT_FILE_NAME)
OUT_FILE_doc       ?= path and file name of the final result

SOURCE_FILES       ?= $(foreach t,$(mk_FILE_TYPES),$(wildcard *.$(t)))


#-- targets --

.PHONY: $(mk_TARGETS)

build:
	#-- write auto-depends
	@$(shell echo $(OUT_FILE): $(mk_OUTPUT_DIRS:%=%\\/) $(mk_OBJECTS) > $(__deps))
	@$(shell echo "	#>> linking ..."                                 >> $(__deps))
	@$(shell echo "	$(cmd_LINK)"                                     >> $(__deps))
	@$(shell echo "	#>> success"                                     >> $(__deps))
	@$(foreach f,$(__filtered_src_files),$(shell echo $(call __obj_of,$f): $f >> $(__deps)))
	@$(MAKE) $(OUT_FILE)
	@rm $(__deps)


$(CONFIGURATIONS):
	$(MAKE) CFG=$@

clean_doc = clear build directory [$(BUILD_DIR)] by removing object files
clean:
	@rm -f $(mk_OBJECTS)


#-- set/derive private variables/lists --

__deps := .mk.deps

__out_file_name_static = lib$(OUT_NAME).$(CMPL).$(ARCH).$(CFG).a
__out_file_name_shared = lib$(OUT_NAME).$(CMPL).$(ARCH).$(CFG).so
__out_file_name_exe    = $(OUT_NAME).$(CMPL).$(ARCH).$(CFG)
__out_file_name        = $(__out_file_name_$(TYPE))

__filter_src_files   = $(filter-out $(IGNORE_FILES.$($(1))),$(SOURCE_FILES.$($(1))))
__classed_src_files  = $(foreach c,$(sort $(mk_BUILD_CLASSES)),$(call __filter_src_files,$(c)))
__filtered_src_files = $(filter-out $(IGNORE_FILES),$(SOURCE_FILES) $(__classed_src_files))
__obj_of             = $(patsubst %,$(BUILD_DIR)/%.o,$(basename $(1)))
mk_OBJECTS           = $(call __obj_of,$(__filtered_src_files))

sinclude $(__deps)
include $(MAKEIT_DIR)/mk.base
include $(MAKEIT_DIR)/mk.log

