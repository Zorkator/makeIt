
#-- set/modify public definitions --

mk_PARAMETERS   += FC FC_MOD_DIR FC_PP_DEFINES FC_INCLUDE_DIRS FC_FLAGS FC_CFLAGS FC_LFLAGS FC_LIBRARY_DIRS FC_LIBRARIES FC_LINK_INPUT
mk_TAG_CLASSES  += FC
mk_TARGETS      += fpp.*
mk_FILE_TYPES   += f95 f90 for f
mk_OUTPUT_DIRS  += $(FC_MOD_DIR)

mk_FC_list      += gfortran ifort
mk_ARCH_list    += 32 64

cmd_COMPILE.f    = $(__fc_cmd_compile)
cmd_COMPILE.f90  = $(__fc_cmd_compile)
cmd_COMPILE.f95  = $(__fc_cmd_compile)
cmd_COMPILE.for  = $(__fc_cmd_compile)
cmd_LINK.fc      = $(__fc_cmd_link.$(BUILT_TYPE))
cmd_LINK        ?= $(cmd_LINK.fc)#  < proposed linker command

#-- user parameters --

FC                   = $(firstword $(mk_FC_list))
FC_doc              ?= used fortran compiler: {$(call mk_csv,$(mk_FC_list))}
FC_CFLAGS           ?= 
FC_CFLAGS_doc       ?= fortran compile flags, applied to any file
FC_FLAGS            ?=
FC_FLAGS_doc        ?= fortran flags, applied to any compile and link command
FC_INCLUDE_DIRS     ?=
FC_INCLUDE_DIRS_doc ?= fortran include directories
FC_LFLAGS           ?= 
FC_LFLAGS_doc       ?= fortran link flags, applied to any file
FC_LIBRARIES        ?=
FC_LIBRARIES_doc    ?= list of linked libraries
FC_LIBRARY_DIRS     ?=
FC_LIBRARY_DIRS_doc ?= list of library directories
FC_LINK_INPUT       ?=
FC_LINK_INPUT_doc   ?= list of other link input files 
FC_MOD_DIR          ?= $(if $(filter exe,$(BUILT_TYPE)),$(BUILD_DIR),$(OUT_DIR))
FC_MOD_DIR_doc      ?= output directory for generated fortran module files
FC_PP_DEFINES       ?=
FC_PP_DEFINES_doc   ?= list of fortran preprocessor defines

#-- exposed compiler switches --

fc          = $(__fc_$(FC))#                 < compiler call
fc_c        = $(__fc_c_$(FC))#               < compile only (no linking)
fc_g        = $(__fc_g_$(FC))#               < compile with debug info
fc_O0       = $(__fc_O0_$(FC))#              < optimization level O0
fc_O1       = $(__fc_O1_$(FC))#              < optimization level O1
fc_O2       = $(__fc_O2_$(FC))#              < optimization level O2
fc_O3       = $(__fc_O3_$(FC))#              < optimization level O3
fc_o        = $(__fc_o_$(FC))#               < output file
fc_m        = $(__fc_m_$(FC))#               < architecture
fc_save     = $(__fc_save_$(FC))#            < place local variables in static memory
fc_fpp      = $(__fc_fpp_$(FC))#             < enable preprocessor
fc_fpp77    = $(__fc_fpp77_$(FC))#           < enable preprocessor f77 style
fc_fpp95    = $(__fc_fpp95_$(FC))#           < enable preprocessor f95 style
fc_form     = $(call __fc_form_$(FC),$1,$2)# < set input format: $(call fc_form,{free,fixed},{n,none})
fc_E        = $(__fc_E_$(FC))#               < preprocess only - implies fc_fpp
fc_D        = $(__fc_D_$(FC))#               < define preprocessor symbol
fc_I        = $(__fc_I_$(FC))#               < include directory
fc_L        = $(__fc_L_$(FC))#               < link directory
fc_l        = $(__fc_l_$(FC))#               < link libraray
fc_mod      = $(__fc_mod_$(FC))#             < directory for module output
fc_pic      = $(__fc_pic_$(FC))#             < generate position independent code (pic) for shared libraries

#-- targets --

fpp.*_doc = preprocess file to stdout
fpp.%:
	$(call __fc_fpp__,$*)


#-- define compiler switches --

__fc_gfortran         := gfortran
__fc_c_gfortran       := -c
__fc_g_gfortran       := -ggdb
__fc_O0_gfortran      := -O0
__fc_O1_gfortran      := -O1
__fc_O2_gfortran      := -O2
__fc_O3_gfortran      := -O3
__fc_o_gfortran       := -o
__fc_m_gfortran       := -m
__fc_save_gfortran    := -fno-automatic
__fc_fpp_gfortran     := -cpp
__fc_fpp77_gfortran   := -x f77-cpp-input
__fc_fpp95_gfortran   := -x f95-cpp-input
__fc_form_gfortran     = -f$1-line-length-$2
__fc_E_gfortran       := -E $(__fc_fpp_gfortran)
__fc_D_gfortran       := -D
__fc_I_gfortran       := -I
__fc_L_gfortran       := -L
__fc_l_gfortran       := -l
__fc_mod_gfortran     := -J
__fc_pic_gfortran     := -shared -fpic
                      
__fc_ifort            := ifort
__fc_c_ifort          := -c
__fc_g_ifort          := -g
__fc_O0_ifort         := -O0
__fc_O1_ifort         := -O1
__fc_O2_ifort         := -O2
__fc_O3_ifort         := -O3
__fc_o_ifort          := -o
__fc_m_ifort          := -m
__fc_save_ifort       := -save
__fc_fpp_ifort        := -fpp -allow nofpp-comments
__fc_fpp77_ifort      := $(__fc_fpp_ifort)
__fc_fpp95_ifort      := $(__fc_fpp_ifort)
__fc_form_ifort_fixed := -fixed
__fc_form_ifort_free  := -nofixed
__fc_form_ifort_none  := -noextend-source
__fc_form_ifort_0     := -noextend-source
__fc_form_ifort        = $(__fc_form_ifort_$1) $(or $(__fc_form_ifort_$2),-extend-source $2)
__fc_E_ifort          := -E $(__fc_fpp_ifort)
__fc_D_ifort          := -D
__fc_I_ifort          := -I
__fc_L_ifort          := -L
__fc_l_ifort          := -l
__fc_mod_ifort        := -module
__fc_pic_ifort        := -shared -fpic

#-- derive private flaglists --

__fc_pp_defines__    = $(call mk_effective,FC_PP_DEFINES)
__fc_pp_defines      = $(__fc_pp_defines__:%=$(fc_D)%)

__fc_include_dirs__  = $(FC_MOD_DIR) $(call mk_effective,FC_INCLUDE_DIRS)
__fc_include_dirs    = $(__fc_include_dirs__:%=$(fc_I)%)

__fc_flags.shared    = $(fc_pic)
__fc_flags           = $(fc_m)$(ARCH) $(__fc_flags.$(BUILT_TYPE)) $(call mk_effective,FC_FLAGS)

__fc_cflags__        = $(fc_mod) $(FC_MOD_DIR) $(call mk_effective,FC_CFLAGS,$1)
__fc_cflags          = $(__fc_include_dirs) $(__fc_pp_defines) $(call __fc_cflags__,$1) $(__fc_flags)

__fc_fpp__           = $(fc) $(fc_E) $(call __fc_cflags,$1)

__fc_library_dirs__  = $(OUT_DIR) $(call mk_effective,FC_LIBRARY_DIRS)
__fc_library_dirs    = $(__fc_library_dirs__:%=$(fc_L)%)

__fc_libraries__     = $(mk_SUB_LIBS) $(call mk_effective,FC_LIBRARIES)
__fc_libraries       = $(__fc_libraries__:%=$(fc_l)%)

__fc_lflags__        = $(call mk_effective,FC_LFLAGS)
__fc_lflags          = $(__fc_lflags__) $(__fc_flags) $(__fc_library_dirs)

__fc_link_input__    = $(call mk_effective,FC_LINK_INPUT)
__fc_link_input      = $(sort $(mk_OBJECTS)) $(__fc_link_input__) $(__fc_libraries)

__fc_cmd_compile     = $(fc) $(fc_c) $(call __fc_cflags,$(notdir $*)) $< $(fc_o) $@

__fc_cmd_link.exe    = $(fc) $(__fc_lflags) $(fc_o) $(OUT_FILE) $(__fc_link_input)
__fc_cmd_link.shared = $(fc) $(__fc_lflags) $(fc_o) $(OUT_FILE) $(__fc_link_input)
__fc_cmd_link.static = ar rv $(OUT_FILE) $(__fc_link_input) && ranlib -t $(OUT_FILE)

