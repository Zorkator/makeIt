
ifndef __mk_fortran_included
__mk_fortran_included := true

include $(dir $(lastword $(MAKEFILE_LIST)))mk.compilation


#-- set/modify public definitions --

mk_PARAMETERS    += FC FC_MOD_DIR FC_PP_DEFINES FC_INCLUDE_DIRS FC_FLAGS FC_CFLAGS FC_LFLAGS FC_LIBRARY_DIRS FC_LIBRARIES FC_LINK_OTHER
mk_TAG_CLASSES   += FC
mk_TARGETS       += fpp.*
mk_FILE_TYPES    += f95 f90 for f
mk_OUTPUT_DIRS   += $(FC_MOD_DIR)
mk_CLEARED_FILES += $(mk_BUILD_DIR)/*.o $(mk_BUILD_DIR)/*.mod

mk_FC_list       += gfortran ifort
mk_ARCH_list     += 32 64
cmd_LINK         ?= $(__fc_cmd_link.$(mk_OUT_TYPE))#  < proposed linker command
cmd_FC_version    = $(shell $(fc) $(fc_version) 2>&1 | sed -ne 's/\([0-9]\+\.[0-9.]\+\)/\1/p')
cmd_FC_depends    = python $(__mk_root)fort_deps.py -o $1 $2 --objdir=$(mk_BUILD_DIR)
cmd_depends      += cmd_FC_depends

#-- user parameters --

FC                   = $(firstword $(mk_FC_list))
FC_doc              ?= used fortran compiler: {$(call mk_csv,$(mk_FC_list))}
mk_FC                = $(call mk_effective,FC)

FC_CFLAGS           ?= 
FC_CFLAGS_doc       ?= fortran compile flags, applied to any file
mk_FC_CFLAGS         = $(call mk_effective,FC_CFLAGS)

FC_FLAGS            ?=
FC_FLAGS_doc        ?= fortran flags, applied to any compile and link command
mk_FC_FLAGS          = $(call mk_effective,FC_FLAGS)

FC_INCLUDE_DIRS     ?=
FC_INCLUDE_DIRS_doc ?= fortran include directories
mk_FC_INCLUDE_DIRS   = $(call mk_effective,FC_INCLUDE_DIRS)

FC_LFLAGS           ?= 
FC_LFLAGS_doc       ?= fortran link flags, applied to any file
mk_FC_LFLAGS         = $(call mk_effective,FC_LFLAGS)

FC_LIBRARIES        ?=
FC_LIBRARIES_doc    ?= list of linked libraries
mk_FC_LIBRARIES      = $(call mk_effective,FC_LIBRARIES)

FC_LIBRARY_DIRS     ?=
FC_LIBRARY_DIRS_doc ?= list of library directories
mk_FC_LIBRARY_DIRS   = $(call mk_effective,FC_LIBRARY_DIRS)

FC_LINK_OTHER       ?=
FC_LINK_OTHER_doc   ?= list of other link input files 
mk_FC_LINK_OTHER     = $(call mk_effective,FC_LINK_OTHER)

FC_MOD_DIR          ?= $(mk_BUILD_DIR)
FC_MOD_DIR_doc      ?= output directory for generated fortran module files
mk_FC_MOD_DIR        = $(call mk_effective,FC_MOD_DIR)

FC_PP_DEFINES       ?=
FC_PP_DEFINES_doc   ?= list of fortran preprocessor defines
mk_FC_PP_DEFINES     = $(call mk_effective,FC_PP_DEFINES)

#-- exposed compiler switches --

fc           = $(__fc_$(mk_FC))#                 < compiler call
fc_c         = $(__fc_c_$(mk_FC))#               < compile only (no linking)
fc_g         = $(__fc_g_$(mk_FC))#               < compile with debug info
fc_O0        = $(__fc_O0_$(mk_FC))#              < optimization level O0
fc_O1        = $(__fc_O1_$(mk_FC))#              < optimization level O1
fc_O2        = $(__fc_O2_$(mk_FC))#              < optimization level O2
fc_O3        = $(__fc_O3_$(mk_FC))#              < optimization level O3
fc_o         = $(__fc_o_$(mk_FC))#               < output file
fc_m         = $(__fc_m_$(mk_FC))#               < architecture
fc_omp       = $(__fc_omp_$(mk_FC))#             < enable OpenMP extensions
fc_save      = $(__fc_save_$(mk_FC))#            < place local variables in static memory
fc_fpp       = $(__fc_fpp_$(mk_FC))#             < enable preprocessor
fc_fpp77     = $(__fc_fpp77_$(mk_FC))#           < enable preprocessor f77 style
fc_fpp95     = $(__fc_fpp95_$(mk_FC))#           < enable preprocessor f95 style
fc_form      = $(call __fc_form_$(mk_FC),$1,$2)# < set input format: $(call fc_form,{free,fixed},{n,none})
fc_E         = $(__fc_E_$(mk_FC))#               < preprocess only - implies fc_fpp
fc_D         = $(__fc_D_$(mk_FC))#               < define preprocessor symbol
fc_I         = $(__fc_I_$(mk_FC))#               < include directory
fc_L         = $(__fc_L_$(mk_FC))#               < link directory
fc_l         = $(__fc_l_$(mk_FC))#               < link libraray
fc_mod       = $(__fc_mod_$(mk_FC))#             < directory for module output
fc_pic       = $(__fc_pic_$(mk_FC))#             < generate position independent code (pic) for shared libraries
fc_soname    = $(__fc_soname_$(mk_FC))#          < set soname
fc_lstatic   = $(__fc_lstatic_$(mk_FC))#         < force static linking
fc_version   = $(__fc_version_$(mk_FC))#         < compiler version string


#-- targets --

fpp.*_doc = preprocess file to stdout
fpp.%:
	$(call __fc_fpp__,$*)


#-- define compiler switches --

__fc_gfortran         := gfortran
__fc_c_gfortran       := -c
__fc_g_gfortran       := -ggdb
__fc_O0_gfortran      := -O0
__fc_O1_gfortran      := -O1
__fc_O2_gfortran      := -O2
__fc_O3_gfortran      := -O3
__fc_o_gfortran       := -o
__fc_m_gfortran       := -m
__fc_omp_gfortran     := -fopenmp
__fc_save_gfortran    := -fno-automatic
__fc_fpp_gfortran     := -cpp
__fc_fpp77_gfortran   := -x f77-cpp-input
__fc_fpp95_gfortran   := -x f95-cpp-input
__fc_form_gfortran     = -f$1-line-length-$2
__fc_E_gfortran       := -E $(__fc_fpp_gfortran)
__fc_D_gfortran       := -D
__fc_I_gfortran       := -I
__fc_L_gfortran       := -L
__fc_l_gfortran       := -l
__fc_mod_gfortran     := -J
__fc_pic_gfortran     := -shared -fpic
__fc_soname_gfortran  := -Wl,-soname,
__fc_lstatic_gfortran := -Wl,-static
__fc_version_gfortran := --version
                      
__fc_ifort            := ifort
__fc_c_ifort          := -c
__fc_g_ifort          := -g
__fc_O0_ifort         := -O0
__fc_O1_ifort         := -O1
__fc_O2_ifort         := -O2
__fc_O3_ifort         := -O3
__fc_o_ifort          := -o
__fc_m_ifort          := -m
__fc_omp_ifort        := -openmp
__fc_save_ifort       := -save
__fc_fpp_ifort        := -fpp -allow nofpp-comments
__fc_fpp77_ifort      := $(__fc_fpp_ifort)
__fc_fpp95_ifort      := $(__fc_fpp_ifort)
__fc_form_ifort_fixed := -fixed
__fc_form_ifort_free  := -nofixed
__fc_form_ifort_none  := -noextend-source
__fc_form_ifort_0     := -noextend-source
__fc_form_ifort        = $(__fc_form_ifort_$1) $(or $(__fc_form_ifort_$2),-extend-source $2)
__fc_E_ifort          := -E $(__fc_fpp_ifort)
__fc_D_ifort          := -D
__fc_I_ifort          := -I
__fc_L_ifort          := -L
__fc_l_ifort          := -l
__fc_mod_ifort        := -module
__fc_pic_ifort        := -shared -fpic
__fc_soname_ifort     := -Wl,-soname=
__fc_lstatic_ifort    := -Wl,-Bstatic
__fc_version_ifort    := -V

#-- derive private flaglists --

__fc_pp_defines      = $(mk_FC_PP_DEFINES:%=$(fc_D)%)
__fc_include_dirs    = $(patsubst %,$(fc_I)%,$(mk_FC_MOD_DIR) $(mk_BUILD_DIR) $(mk_FC_INCLUDE_DIRS))

__fc_flags.shared    = $(fc_pic)
__fc_flags           = $(fc_m)$(mk_ARCH) $(__fc_flags.$(mk_BUILD_MODE)) $(mk_FC_FLAGS)

__fc_cflags__        = $(fc_mod) $(mk_FC_MOD_DIR) $(call mk_effective,FC_CFLAGS,$1)
__fc_cflags          = $(__fc_include_dirs) $(__fc_pp_defines) $(__fc_flags) $(call __fc_cflags__,$1)

__fc_fpp__           = $(fc) $(fc_E) $(call __fc_cflags,$1)

__fc_library_dirs    = $(patsubst %,$(fc_L)%,$(mk_OUT_DIR) $(mk_BUILD_DIR) $(mk_FC_LIBRARY_DIRS))
__fc_libraries       = $(patsubst %,$(fc_l)%,$(mk_PKG_LIBRARIES) $(mk_FC_LIBRARIES))
__fc_lflags.shared   = $(fc_soname)$(mk_OUT_FILE_NAME)$(mk_MAYOR)
__fc_lflags          = $(mk_FC_LFLAGS) $(__fc_flags) $(__fc_lflags.$(mk_BUILD_MODE)) $(__fc_library_dirs)
__fc_link_objects    = $(sort $(mk_OBJECTS))
__fc_link_input      = $(__fc_link_objects) $(mk_FC_LINK_OTHER) $(__fc_libraries)

__fc_cmd_compile     = $(fc) $(fc_c) $(call __fc_cflags,$(notdir $*)) $(call mk_fileType_opts,$(notdir $<)) $< $(fc_o) $@

__fc_cmd_link.exe    = $(fc) $(__fc_lflags) $(fc_o) $(mk_OUT_FILE) $(__fc_link_input)
__fc_cmd_link.shared = $(fc) $(__fc_lflags) $(fc_o) $(mk_OUT_FILE_SO) $(__fc_link_input) && $(__fc_symlnk_so) && $(__fc_copy_mods)
__fc_cmd_link.static = ar rs $(mk_OUT_FILE) $(__fc_link_objects) && $(__fc_copy_mods)

__fc_copy_mods       = cp $(mk_FC_MOD_DIR)/*[^_].mod $(mk_OUT_DIR) 2> /dev/null || :
__fc_symlnk_so       = ln -sf $(mk_OUT_FILE_NAME_SO) $(mk_OUT_FILE)$(mk_MAYOR) && ln -sf $(mk_OUT_FILE_NAME)$(mk_MAYOR) $(mk_OUT_FILE)


$(mk_BUILD_DIR)/%.o: %.f95
	$(call mk_logged_cmd,$(__fc_cmd_compile))

$(mk_BUILD_DIR)/%.o: %.f90
	$(call mk_logged_cmd,$(__fc_cmd_compile))

$(mk_BUILD_DIR)/%.o: %.for
	$(call mk_logged_cmd,$(__fc_cmd_compile))

$(mk_BUILD_DIR)/%.o: %.f
	$(call mk_logged_cmd,$(__fc_cmd_compile))

endif # __mk_fortran_included

