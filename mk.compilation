
ifndef __mk_compilation_included
__mk_compilation_included := true

include $(dir $(lastword $(MAKEFILE_LIST)))mk.base


#-- set/modify public definitions --

mk_PARAMETERS   += BUILD_MODE CFG ARCH TAG BUILD_DIR OUT_TYPE OUT_DIR OUT_NAME OUT_FILE_NAME OUT_FILE OUT_UMASK
mk_TAG_CLASSES  += BUILD_MODE CFG ARCH
mk_TARGET_list  += built depend clean $(TARGETS)
mk_FILE_TYPES   += 
mk_OUTPUT_DIRS  += $(mk_BUILD_DIR) $(mk_OUT_DIR)
#mk_SUB_LIBS     += $(__sub_libraries)

DEPS_           ?= .mk.deps
mk_DEPS          = $(mk_BUILD_DIR)/$(DEPS_)

mk_OUT_TYPE_list   += static shared exe
mk_ARCH_list       +=
mk_CFG_list         = $(CONFIGURATIONS)
mk_FILE_PATTERNS    = $(sort $(FILE_PATTERNS) $(mk_FILE_TYPES:%=*.%))
mk_FILE_PATTERNS_RE = $(sort $(FILE_PATTERNS_RE))
mk_TAG_list         = $(filter-out BUILD_MODE,$(mk_TAG_CLASSES))
mk_TAG_CLASS_list   = $(sort $(mk_TAG_CLASSES) mk_ANY)

mk_tags	            = $(foreach c,$(filter-out $1,$(mk_TAG_CLASS_list)),$($1.$(call mk_val,$c)))
mk_get              = $(or $($1),$(strip $(call mk_tags,$(notdir $1))),$($1_default))
mk_fileType_opts    = $(call mk_pattern_opts,mk_FILE_PATTERNS,$1) $(call mk_patternRE_opts,mk_FILE_PATTERNS_RE,$1)
mk_object_of        = $(patsubst %,$(mk_BUILD_DIR)/%.o,$(notdir $(basename $(1))))

any_source          = $(foreach t,$(mk_FILE_TYPES),$(wildcard *.$(t)))
any_source_in       = $(foreach t,$(mk_FILE_TYPES),$(wildcard $(1)/*.$(t)))
scan_source         = $(foreach d,$(mk_SOURCE_DIRS),$(call any_source_in,$d))
svn_revision       := $(shell svn info | sed -ne 's/^Revision: //p')
svn_modified       := $(shell svn st | grep "^M " | awk '{print $$NF}')
svn_modified_tab    = $(call mk_join,\\\n,$(svn_modified))


#-- user parameters --

CONFIGURATIONS     ?= debug release
debug_doc          ?= shortcut target for building with debug options. Equivalent to: "make built CFG=debug"
release_doc        ?= shortcut target for building with optimization and without debug options. Equivalent to: "make built CFG=release"

ARCH_doc           ?= architecture id: {$(call mk_csv,$(mk_ARCH_list))}
ARCH_default        = $(firstword $(mk_ARCH_list))
mk_ARCH             = $(call mk_get,ARCH)

CFG_doc            ?= current build configuration: {$(call mk_csv,$(mk_CFG_list))}
CFG_default         = $(firstword $(mk_CFG_list))
mk_CFG              = $(call mk_get,CFG)

TAG_doc            ?= string for tagging build directory.
TAG_default         = $(subst $(mk_SPACE),.,$(foreach t,$(mk_TAG_list),$(mk_$t)))
mk_TAG              = $(call mk_get,TAG)

BUILD_MODE_doc     ?= mode for building object files: {$(call mk_csv,$(mk_OUT_TYPE_list))}
BUILD_MODE_default  = $(mk_OUT_TYPE)
mk_BUILD_MODE       = $(call mk_get,BUILD_MODE)

BUILD_DIR_doc      ?= working directory for building object files.
BUILD_DIR_default   = $(mk_TAG).$(mk_BUILD_MODE)
mk_BUILD_DIR        = $(or $(BUILD_DIR),.work/$(call mk_get,BUILD_DIR))

OUT_TYPE_doc       ?= type of built binary: {$(call mk_csv,$(mk_OUT_TYPE_list))}
OUT_TYPE_default    = $(firstword $(mk_OUT_TYPE_list))
mk_OUT_TYPE         = $(call mk_get,OUT_TYPE)

OUT_DIR_doc        ?= output directory for effective output file(s)
OUT_DIR_default     = $(mk_BUILD_DIR)
mk_OUT_DIR          = $(call mk_get,OUT_DIR)

OUT_NAME_doc       ?= the base name of the final result
OUT_NAME_default    = outname
mk_OUT_NAME         = $(call mk_get,OUT_NAME)

OUT_FILE_NAME_doc     ?= the file name of the final result
OUT_FILE_NAME_default  = $(__out_file_name)
mk_OUT_FILE_NAME       = $(call mk_get,OUT_FILE_NAME)
mk_OUT_FILE_NAME_SO    = $(call mk_get,OUT_FILE_NAME)$(mk_MAYOR)$(mk_MINOR)

OUT_FILE_doc       ?= path and file name of the final result
OUT_FILE_default    = $(mk_OUT_DIR)/$(mk_OUT_FILE_NAME)
mk_OUT_FILE         = $(call mk_get,OUT_FILE)
mk_OUT_FILE_SO      = $(call mk_get,OUT_FILE)$(mk_MAYOR)$(mk_MINOR)

OUT_UMASK_doc      ?= the umask to set for the final output file
mk_OUT_UMASK        = $(call mk_get,OUT_UMASK)

MAYOR_doc          ?= mayor version number
MAYOR_default       = 0
mk_MAYOR            = .$(call mk_val,MAYOR)

MINOR_doc          ?= minor version number, e.g. svn revision
MINOR_default       = $(svn_revision)
mk_MINOR            = .$(call mk_val,MINOR)

SOURCE_FILES       += $(scan_source)
mk_SOURCE_DIRS      = $(call mk_get,SOURCE_DIRS)
mk_SOURCE_FILES     = $(call mk_get,SOURCE_FILES)
mk_IGNORE_FILES     = $(call mk_get,IGNORE_FILES)
mk_CLEARED_FILES   += $(CLEARED_FILES)

mk_DEPENDS_ON       = $(call mk_get,DEPENDS_ON)
mk_BINARY_TAG       = $(call mk_get,BINARY_TAG)
mk_BINARY_TAG_len   = $(call mk_lines,$(mk_BINARY_TAG))
mk_BINARY_TAG_frame = $(if $(mk_BINARY_TAG),\
                           \n $(mk_BINARY_TAG)                       \n\
                           tail -$(call plus,$(mk_BINARY_TAG_len),2) \n\
                           head -$(mk_BINARY_TAG_len)\n,)


#-- targets --

.DEFAULT_GOAL = help
.DELETE_ON_ERROR:

.PHONY: $(mk_TARGET_list) $(mk_CFG_list) built depend

built_doc = target for starting build process
built: depend
	# check subpackages ...
	@for pkg in `$(mk_echo) '$(call mk_lsv,$(mk_DEPENDS_ON))'`; do   \
		$(mk_echo) building subpackage $$pkg ...                      ;\
		$(MAKE) -C $$pkg built                                        ;\
	done
	@$(MAKE) DEPS_=$(mk_DEPS) OUT_='$(mk_OUT_FILE)' DIRS_='$(mk_OUTPUT_DIRS)' OBJ_='$(mk_OBJECTS)' $(mk_OUT_FILE)


depend_doc = build dependency list in $(mk_DEPS)
depend:
	# evaluate dependencies ...
	@$(if $(__source_files),,$(error missing source files))
	@$(MAKE) --quiet $(__source_files) $(dir $(mk_DEPS))
	@$(mk_echo) '=====\nstarted build @ '`date`'\n=====' > $(mk_LOG_FILE)
	@$(foreach cmd,$(cmd_depends),$(call $(cmd),$(mk_DEPS),$(__source_files)))


$(OUT_): $(OBJ_)
	$(call mk_logged_cmd,$(cmd_LINK))
	@if [ -e "$(OUT_)" ]; then                                 \
		$(mk_echo) tagging binary ...                           ;\
		$(mk_echo) -n '$(mk_BINARY_TAG_frame)' | tee -a $(OUT_) ;\
		if [ -n "$(mk_OUT_UMASK)" ]; then                        \
			chmod $(mk_OUT_UMASK) $(OUT_)                         ;\
		fi                                                      ;\
		$(mk_echo) \\n=== built successful ===                  ;\
		$(mk_echo) \\n  $(OUT_) \\n                             ;\
	fi
	
$(OBJ_): | $(sort $(DIRS_:%=%\/))


$(mk_CFG_list):
	@$(MAKE) CFG=$@ built


clean_doc = clear build directory [$(mk_BUILD_DIR)] by removing object files
clean:
	@rm -f $(mk_CLEARED_FILES) $(mk_LOG_FILE) $(mk_DEPS)
	@for pkg in `$(mk_echo) '$(call mk_lsv,$(mk_DEPENDS_ON))'`; do   \
		$(mk_echo) cleaning subpackage $$pkg ...                      ;\
		$(MAKE) -C $$pkg clean                                        ;\
	done

#-- set/derive private variables/lists --

__out_file_name_static = lib$(1).a
__out_file_name_shared = lib$(1).so
__out_file_name_exe    = $(1)
__out_file_name_of     = $(call __out_file_name_$2,$1)
__out_file_name        = $(call __out_file_name_of,$(mk_OUT_NAME).$(mk_TAG),$(mk_OUT_TYPE))

__built_type_exe       = APPLICATION
__built_type_shared    = SHARED_LIB
__built_type_static    = STATIC_LIB
mk_BUILT_TYPE_NAME	   = $(__built_type_$(mk_OUT_TYPE))

__source_files    = $(filter-out $(mk_IGNORE_FILES),$(mk_SOURCE_FILES))
__source_dirs     = $(sort $(dir $(__source_files)))
mk_OBJECTS        = $(call mk_object_of,$(__source_files))

VPATH = $(subst $(mk_SPACE),:,$(__source_dirs))

sinclude $(DEPS_)

endif # __mk_compilation_included

