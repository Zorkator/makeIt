
ifndef __mk_compilation_included
__mk_compilation_included := true

include $(dir $(lastword $(MAKEFILE_LIST)))mk.log


#-- set/modify public definitions --

mk_PARAMETERS   += BUILD_MODE CFG ARCH TAG BUILD_DIR OUT_TYPE OUT_DIR OUT_NAME OUT_FILE_NAME OUT_FILE OUT_UMASK SUBPACKAGES
mk_OPT_CLASSES  += BUILD_MODE CFG ARCH
mk_TARGET_list  += built clean rescan grep,* $(TARGETS)
mk_FILE_TYPES   += 
mk_OUTPUT_DIRS  += $(mk_BUILD_DIR) $(mk_OUT_DIR)

DEPS_               = # empty by default
SRC_CACHE_          = # empty by default
mk_DEPS             = $(mk_BUILD_DIR)/.mk.deps
mk_DEPS_info        = $(notdir $(mk_pwd))  [$1] @ $(mk_now)
mk_SRC_CACHE        = $(mk_BUILD_DIR)/.mk.sourcelist
mk_V_SCRIPT         = $(mk_BUILD_DIR)/.mk.version.script

__builtin_OUT_TYPEs = exe shared static
mk_OUT_TYPE_list    = $(call mk_selective,$(OUT_TYPE_list) $(__builtin_OUT_TYPEs))
mk_BUILD_MODE_list  = $(mk_OUT_TYPE_list)
mk_ARCH_list       +=
mk_CFG_list         = $(call mk_selective,$(CFG_list) $(__builtin_CFGs))
mk_FILE_PATTERNS    = $(sort $(FILE_PATTERNS) $(mk_FILE_TYPES:%=*.%))
mk_FILE_PATTERNS_RE = $(sort $(FILE_PATTERNS_RE))
mk_OPT_list         = $(filter-out BUILD_MODE,$(mk_OPT_CLASSES))
mk_OPT_CLASS_list   = $(sort $(mk_OPT_CLASSES) mk_ANY)

mk_tag_values_of    = $(foreach c,$(filter-out $1,$(mk_OPT_CLASS_list)),$($1.$(call mk_val,$c)))#<        get variable values of all tags in effect!
mk_tags_or_default  = $(or $(strip $(call mk_tag_values_of,$(notdir $1))),$($1_default))#<                get either tag-values or default value of variable
mk_get              = $(or $($1),$(if $(call mk_defined,$1),$(mk_NULL),$(call mk_tags_or_default,$1)))#<  get either value, tag-values or default of variable
mk_fileType_opts    = $(call mk_pattern_opts,mk_FILE_PATTERNS,$1) $(call mk_patternRE_opts,mk_FILE_PATTERNS_RE,$1)
mk_variant_of       = $(dir $1).variant.$(notdir $1)# < build rules urge us to link in source directory :-(
mk_chain_args       = $(subst ' -,' -$1 -,$2)

any_source          = $(foreach t,$(mk_FILE_TYPES),$(wildcard *.$(t)))
any_source_in       = $(foreach t,$(mk_FILE_TYPES),$(wildcard $(call mk_norm_dir,$1)/*.$(t)))
scan_source         = $(call mk_info,scanning source dirs ...)$(foreach d,$(mk_SOURCE_DIRS),$(call any_source_in,$d))

scan_file_pattern   = $(call mk_chain_args,or,$(foreach x,$(mk_FILE_TYPES),-name '*.$x'))
ignore_dir_pattern  = $(call mk_chain_args,or,$(foreach x,$(mk_IGNORE_DIRS),-path '*/$x/*') -path '*/.*')
scan_files_in       = $(call mk_info,scanning files in $(abspath $1) ...)$(shell find -L $1 \( $(scan_file_pattern) \) -and -not \( $(ignore_dir_pattern) \))
scan_source_dirs    = $(call mk_norm_dir,$(sort $(dir $(call scan_files_in,$1))))
filter_source_in    = $(filter $1/%,$(mk_SOURCE_FILES))
strip_source_in     = $(patsubst $1/%,%,$(call filter_source_in,$1))


#-- definitions for querying information of version control system

__vcs_info_cmd_git    = LANG=C git describe
__vcs_stat_cmd_git    = LANG=C git status -s
__vcs_repo_root_git   = $(shell git config --get remote.origin.url)
__vcs_revision_nr_git = $(shell git rev-list HEAD --count)
__vcs_revision_id_git = $(shell git describe --long --tags --dirty --always)
__vcs_branch_id_git   = $(shell git rev-parse --abbrev-ref HEAD)

__vcs_info_cmd_svn    = LANG=C svn info
__vcs_stat_cmd_svn    = LANG=C svn status
__vcs_repo_root_svn   = $(shell $(__vcs_info_cmd_svn) | sed -ne 's/^Repository Root: //p')
__vcs_repo_url_svn    = $(shell $(__vcs_info_cmd_svn) | sed -ne 's/^URL: //p')
__vcs_revision_nr_svn = $(shell $(__vcs_info_cmd_svn) | sed -ne 's/^Revision: //p' $())
__vcs_revision_id_svn = $(__vcs_revision_nr_svn)$(if $(vcs_modified),-dirty,)
__vcs_branch_id_svn   = $(patsubst $(__vcs_repo_root_svn)/%,%,$(__vcs_repo_url_svn))

__VCS            := git svn
__builtin_VCS    := $(foreach c,$(__VCS),$(if $(shell $(__vcs_info_cmd_$c) $(mk_ignoreErrors)),$c,-$c))
mk_VCS_list       = $(call mk_selective,$(VCS_list) $(__builtin_VCS))

VCS_doc          ?= used version contronl system: $(call mk_opt_set,VCS)
VCS               = $(firstword $(mk_VCS_list))
mk_VCS            = $(call mk_get,VCS)

vcs_repo_root     = $(__vcs_repo_root_$(mk_VCS))
vcs_revision_nr   = $(__vcs_revision_nr_$(mk_VCS))
vcs_revision      = $(vcs_revision_nr)$(if $(vcs_modified),-dirty,)
vcs_revision_id   = $(__vcs_revision_id_$(mk_VCS))
vcs_project_id    = $(notdir $(vcs_repo_root))
vcs_branch_id     = $(__vcs_branch_id_$(mk_VCS))
vcs_modified      = $(shell $(__vcs_stat_cmd_$(mk_VCS)) | grep "^\s*M " | awk '{print $$NF}')
vcs_modified_tab  = $(call mk_join,\\\n,$(vcs_modified))


mk_frameBinaryTag   = $(if $1,\
                           \n $1                                     \n\
                           tail -n$(call plus,$(call mk_lines,$1),2) \n\
                           head -n$(call mk_lines,$1)\n,)

# $(call mk_list_multisource,SOURCE_FILES,[ITEM_INDENT],[FUNC=mk_args])
mk_list_multisource = $(strip $(call ___object_source_of,$(or $1,$(mk_SOURCE_FILES)),$2,$3))

# $(call ___object_source_of,SOURCE_FILES,[ITEM_INDENT],[FUNC=mk_args])
define ___object_source_of
	$(eval ___src_files := $(call mk_path,$1))
	$(eval ___objects   := $(addsuffix .o,$(notdir $(basename $1))))
	$(eval ___indent    := $(or $2,multiple source file for))
	$(eval ___func      := $(or $3,mk_args))
	$(strip \
    $(foreach o,$(sort $(___objects)),  \
      $(if $(filter-out 1,$(call mk_count,$o,$(___objects))), \
        $(call $(___func),$(___indent) $o: [$(strip $(call ___source_files_of,$o,$(___src_files)))]))))
endef

#	$(call ___source_files_of,OBJECT,SOURCE_FILES)
define ___source_files_of
	$(call mk_grep,/$(basename $1).,$2)
endef

# $(call ___exports_of,REGEX_EXPORT,SOURCE_FILES)
define ___exports_of
	$(call mk_file_grep,$(word 1,$1),$(word 2,$1),$2)
endef

# $(call mk_packages,BUILD_TARGET)
# NOTE: mk_submake uses calls MAKE (instead of mk_MAKE), since we can NOT force the same makefile for subpackages.
define mk_packages
	+$(if $(mk_SUBPACKAGES),\
		@$(mk_echo) ''$(call mk_frame,make $1 @ subpackages) \
		$(foreach pkg,$(mk_SUBPACKAGES),                     \
			$(call mk_submake,$1 MAKEFLAGS="$(or $(MAKEFLAGS.$(pkg)),$(mk_PKG_MAKEFLAGS))" -C,$(pkg),1,MAKE,'\n>> SUBPACKAGE:')) \
		@$(mk_echo))
endef

# $(call ___reduce_so,SO_FILENAME)
___reduce_so = $(if $(findstring .so.,$1),$1 $(call ___reduce_so,$(basename $1)),$1)

# $(call mk_symlink_so,SO_FILENAME)
define mk_symlink_so
	$(call mk_link,$(foreach i,$(call rest,$(call ___reduce_so,$1)),$(notdir $1) $i))
endef

# $(call mk_collect_so,LIB_DIRS,SO_NAMES[,TARGET_DIR])
define mk_collect_so
	$(eval ___lib_dirs     := $(mk_BUILD_DIR) $1)
	$(eval ___target_dir   := $(or $3,$(mk_OUT_DIR)))
	$(eval ___find_pattern := $(subst ' -,' -or -,$(foreach l,$2,-wholename '*$l*.so*')))
	$(if $2,\
    find $(___lib_dirs) -maxdepth 1 \( $(___find_pattern) \) -printf '\ngrabbing dependency %f from %h' -exec cp -a {} $(___target_dir) \; $(mk_ignoreErrors))
endef

# $(mk_find_archives,ARCH_DIRS,ARCH_NAMES)
define mk_find_archives
	$(eval ___find_pattern := $(subst ' -,' -or -,$(foreach l,$2,-wholename '*/lib$l*.a')))
	$(if $(and $1,$2), \
		$(shell find $1 \( $(___find_pattern) \) -and -not \( -path '*/.*' -or -type d \) -print))
endef

# $(mk_create_version_script)
define mk_create_version_script
	$(eval ___script  := $(mk_V_SCRIPT))
	$(eval ___libid   := $(firstword $(call mk_split,.,$(mk_OUT_FILE_NAME))))
	$(eval ___exports := $(mk_EXPORTS))
	$(call mk_write_file,$(___script),$(___libid),"%s\n{\nglobal:\n")
	$(if $(and $(___exports),$(call sne,$(___exports),*)),                \
		$(call mk_write_file,$(___script),$(___exports),"  %s_;\n",append), \
		$(call mk_write_file,$(___script),,"  *;\n",append))
	$(call mk_write_file,$(___script),local,"%s:\n  *;\n};\n",append)
endef

# $(mk_create_archive,ARCHIVE,OBJECTS,LIB_DIRS,LIB_NAMES)
define mk_create_archive
	$(eval ___script   := $(mk_BUILD_DIR)/.mk.ar.script)
	$(eval ___archives := $(strip $(call mk_find_archives,$3,$4)))
	@$(call mk_log,ar rs $(abspath $1) $(sort $(notdir $2)) $(___archives))
	$(call mk_write_file,$(___script),CREATE $1,"%s %s\n")
	$(call mk_write_file,$(___script),$(sort $2),"ADDMOD %s\n",append)
	$(foreach arch,$(___archives),\
		$(call mk_write_file,$(___script),$(arch),"ADDLIB %s\n",append))
	$(call mk_write_file,$(___script),SAVE END,,append)
	ar -M < $(___script)
endef

# $(call mk_depends,DEPS_FILE,FILELIST
define mk_depends
	@$(call mk_log,'\\n$(call mk_frame,building deps $(call mk_DEPS_info,$@))',,renew)
	: >$1
	$(foreach cmd,$(cmd_depends),$(call $(cmd),$1,$2))
endef

#-- user parameters --

# prepare built in CONFIGURATIONS debug and release
__builtin_CFGs        := debug release
debug_doc             ?= shortcut target for building with debug options. Equivalent to: "make built CFG=debug"
release_doc           ?= shortcut target for building with optimization and without debug options. Equivalent to: "make built CFG=release"

ARCH_doc              ?= architecture id: $(call mk_opt_set,ARCH)
ARCH_default           = $(firstword $(call mk_selective,$(mk_ARCH_list)))
mk_ARCH                = $(call mk_get,ARCH)

CFG_doc               ?= current build configuration: $(call mk_opt_set,CFG)
CFG_default            = $(firstword $(mk_CFG_list))
mk_CFG                 = $(call mk_get,CFG)

TAG_doc               ?= string for tagging build directory.
TAG_default            = $(subst $(mk_SPACE),.,$(foreach t,$(mk_OPT_list),$(mk_$t)))
mk_TAG                = $(call mk_get,TAG)

mk_BUILT_TYPE_NAME     = $(or $(__built_type_$(mk_OUT_TYPE)),$(mk_OUT_TYPE))
__built_type_exe       = APPLICATION
__built_type_shared    = SHARED_LIB
__built_type_static    = STATIC_LIB

BUILD_MODE_doc        ?= mode for building object files: $(call mk_opt_set,BUILD_MODE)
BUILD_MODE_default     = $(mk_OUT_TYPE)
mk_BUILD_MODE          = $(call mk_get,BUILD_MODE)

BUILD_DIR_doc         ?= working directory for building object files.
BUILD_DIR_default      = $(mk_TAG).$(mk_BUILD_MODE)
mk_BUILD_DIR           = $(or $(BUILD_DIR),.work/$(call mk_get,BUILD_DIR))

OUT_TYPE_doc          ?= type of built binary: $(call mk_opt_set,OUT_TYPE)
OUT_TYPE              ?= $(OUT_TYPE_default)
OUT_TYPE_default       = $(firstword $(mk_OUT_TYPE_list))
mk_OUT_TYPE            = $(call mk_get,OUT_TYPE)

DIST_ARCH_list        ?= $(mk_ARCH)
DIST_CFG_list         ?= release
DIST_OUT_TYPE_list    ?= $(mk_OUT_TYPE_list)

OUT_DIR_doc           ?= output directory for effective output file(s)
OUT_DIR_default        = $(mk_BUILD_DIR)
mk_OUT_DIR             = $(call mk_get,OUT_DIR)

OUT_NAME_doc          ?= the base name of the final result
OUT_NAME_default       = outname.$(mk_TAG)
mk_OUT_NAME            = $(call mk_get,OUT_NAME)

OUT_FILE_NAME_doc     ?= the file name of the final result
OUT_FILE_NAME_default  = $(__out_file_name)
mk_OUT_FILE_NAME       = $(call mk_get,OUT_FILE_NAME)
__out_file_name        = $(call __out_file_name_of,$(mk_OUT_NAME),$(mk_OUT_TYPE))
__out_file_name_of     = $(call __out_file_name_$2,$(strip $1))
__out_file_name_exe    = $1
__out_file_name_static = lib$1.a
__out_file_name_shared = lib$1.so

OUT_FILE_doc          ?= path and file name of the final result
OUT_FILE_default       = $(mk_OUT_DIR)/$(mk_OUT_FILE_NAME)
mk_OUT_FILE            = $(call mk_get,OUT_FILE)$(__out_file_tag_$(mk_OUT_TYPE))
__out_file_tag_shared  = $(mk_VERSION)

OUT_UMASK_doc         ?= the umask to set for the final output file
mk_OUT_UMASK           = $(call mk_get,OUT_UMASK)

MAYOR_doc             ?= mayor version number
MAYOR_default          = 0
mk_MAYOR               = $(call mk_prefix,.,$(call mk_val,MAYOR))

MINOR_doc             ?= minor version number, e.g. svn revision
MINOR_default          = $(vcs_revision)
mk_MINOR               = $(call mk_prefix,.,$(call mk_val,MINOR))

VERSION_doc           ?= version number, default: $(mk_MAYOR)$(mk_MINOR)
VERSION_default        = $(mk_MAYOR)$(mk_MINOR)
mk_VERSION             = $(call mk_val,VERSION)

SOURCE_DIRS_default    = $(call scan_source_dirs,.)
mk_SOURCE_DIRS         = $(call mk_get,SOURCE_DIRS)
mk_IGNORE_DIRS         = $(call mk_get,IGNORE_DIRS)

SOURCE_FILES_default   = $(scan_source)
mk_SOURCE_FILES        = $(filter-out $(mk_IGNORE_FILES),$(call mk_get,SOURCE_FILES) $(mk_VARIANT_SOURCE))
mk_IGNORE_FILES        = $(call mk_get,IGNORE_FILES)
mk_VARIANT_FILES       = $(call mk_get,VARIANT_FILES)
mk_VARIANT_SOURCE      = $(call map,mk_variant_of,$(mk_VARIANT_FILES))
mk_VARIANT_PAIRS       = $(foreach f,$(mk_VARIANT_FILES),$(abspath  $f) $(call mk_variant_of,$f))

mk_OBJECTS             = $(patsubst %,$(mk_BUILD_DIR)/%.o,$(notdir $(basename $(mk_SOURCE_FILES))))

OBJECT_ARCHIVE        ?= $(mk_BUILD_DIR)/.mk.objects.a
OBJECT_ARCHIVE.static  = $(mk_OUT_FILE)
mk_OBJECT_ARCHIVE      = $(or $(OBJECT_ARCHIVE.$(mk_OUT_TYPE)),$(OBJECT_ARCHIVE))

EXPORTS_doc           ?= list of exported symbols
EXPORTS_default        = $(call ___exports_of,$(regex_export),$(mk_SOURCE_FILES))
mk_EXPORTS             = $(call mk_get,EXPORTS)

mk_CLEARED_FILES      += $(CLEARED_FILES) $(mk_VARIANT_SOURCE) $(mk_LOG_FILE) $(mk_DEPS) $(mk_SRC_CACHE)

SUBPACKAGES_doc       ?= directory list of project prerequisites
mk_SUBPACKAGES         = $(call mk_get,SUBPACKAGES)

mk_MAKEFLAGS           = $(call uniq,$(foreach o,$(mk_OPT_CLASSES),$o=$(mk_$o)) $(MAKEFLAGS))
mk_PKG_MAKEFLAGS       = $(call mk_flag_filter,-out,$(___pkg_filtered_flags),$(mk_MAKEFLAGS)) OUT_TYPE=shared OUT_DIR=$(abspath $(mk_BUILD_DIR))
mk_pkg_reflag          = $(call mk_flag_replace,$(mk_PKG_MAKEFLAGS),$1 $(___pkg_compat.$(mk_BUILD_MODE)))
___pkg_filtered_flags  = BUILD_MODE OUT_TYPE OUT_NAME OUT_DIR SOURCE_FILES SOURCE_DIRS
___pkg_compat.shared  := BUILD_MODE=shared

mk_MAKEOPTIONS         = $(call mk_options,$(mk_MAKEFLAGS))
mk_MAKESWITCHES        = $(call mk_switches,$(MAKEFLAGS))#< make switches are independent from OPT_CLASSES


mk_BINARY_TAG          = $(call mk_get,BINARY_TAG)
mk_BINARY_TAG_frame    = $(call mk_get,BINARY_TAG_frame)
___framedBinaryTag     = $(or $(mk_BINARY_TAG_frame),$(call mk_frameBinaryTag,$(mk_BINARY_TAG)))

ACTION_PRELINK_doc     = shell command called just before linking
ACTION_PRELINK_default =
mk_ACTION_PRELINK      = $(call mk_get,ACTION_PRELINK)

ACTION_POSTLINK_doc     = shell command called just after linking
ACTION_POSTLINK_default = 
mk_ACTION_POSTLINK      = $(call mk_get,ACTION_POSTLINK)

#-- targets --

.SECONDEXPANSION:
.DELETE_ON_ERROR:
.PHONY: $(mk_TARGET_list) $(mk_CFG_list) built


built_doc = target for starting build process
built: mk_tgt_chk_opts $$(patsubst %,%\/,$$(mk_OUTPUT_DIRS))
	@$(call mk_packages,built)
	@$(eval __src_list := $(call mk_read_file,$(mk_SRC_CACHE)))
	@if [ -z "$(call seq,$(__src_list),$(mk_SOURCE_FILES))" ]; then \
		rm -f $(mk_SRC_CACHE)                                      ;\
	fi
	@+$(mk_MAKE) SRC_CACHE_=$(mk_SRC_CACHE) DEPS_=$(mk_DEPS) OUT_='$(mk_OUT_FILE)' '$(mk_SRC_CACHE)' '$(mk_DEPS)' '$(mk_OUT_FILE)'


$(SRC_CACHE_): $(MAKEFILE_LIST)
	@$(mk_echo) '\n'$(call mk_frame,recaching source files ...)
	@mkdir -p $(mk_BUILD_DIR) #<  ensure build dir explicitly - can't do this by prerequisite, as its time stamp changes!
	@$(call mk_link,$(mk_VARIANT_PAIRS))         #< create links to variant files
	@$(call mk_write_file,$@,$(mk_SOURCE_FILES)) #< write list of source files to cache file


$(DEPS_):
	@$(eval __src_files := $(mk_SOURCE_FILES))
	@touch $@                                  #< need to touch DEPS_-file BEFORE mk_submake to prevent endless recursion!!!
	@$(call mk_submake,--quiet,$(__src_files)) #< call submake on source files to ensure they're up-to-date
	@$(call mk_depends,$@,$(__src_files))      #< update DEPS_-file
	@$(eval ___multi_src_objects := $(call mk_list_multisource,$(__src_files),. . . . >>))
	@if [ -n "$(___multi_src_objects)" ]; then  \
		$(call mk_log,\nWARNING: Your makefile effectively specifies multiple source files yielding the same object!                              \
		              \n         For compiling the following objects make will consider only the first source file:\n\n $(___multi_src_objects)) ;\
		$(if $(NON_INTERACTIVE),echo ,)read -p "press ENTER to continue"                                                                         ;\
	fi


$(OUT_): $$(mk_OBJECTS)
	@$(mk_ACTION_PRELINK)
	@$(call mk_log,'$(call mk_frame,linking target $@)')
	@$(call cmd_LINK,$@,$(mk_OBJECTS))
	@$(call mk_log)
	@if [ -n "$(___framedBinaryTag)" ]; then                      \
		$(call mk_log,'$(call mk_frame,tagging binary $(OUT_))') ;\
		$(call mk_log,$(___framedBinaryTag),-n) | tee -a $@      ;\
	fi
	@if [ -n "$(mk_OUT_UMASK)" ]; then                            \
		chmod $(mk_OUT_UMASK) $@                                 ;\
	fi                                                           
	@$(call mk_log,'\\n$(call mk_frame,built successfully)')         
	@$(mk_ACTION_POSTLINK)


$(mk_CFG_list):
	@$(mk_MAKE) CFG=$@ built


clean_doc = clear build directory [$(mk_BUILD_DIR)] by removing object files
clean:
	$(call mk_packages,clean)
	@rm -f $(mk_CLEARED_FILES)


rescan_doc = trigger rescan of source files and recreation of build dependencies
rescan:
	@rm -f $(mk_SRC_CACHE)


grep,*_doc = grep pattern in source files: make grep,PATTERN[,GREP-OPTS]; default: GREP-OPTS: -iw
__grep     = grep --color $(or $(wordlist 2,$(words $1),$1),-iw) $(firstword $1)
grep,%:
	$(if $(call seq,grep$(mk_COMMA).o,$@),$(error USAGE: $(grep,*_doc)))
	-@$(call __grep,$(call mk_ssv,$*)) $(mk_SOURCE_FILES) || $(mk_echo) no match


VPATH = $(subst $(mk_SPACE),:,$(mk_SOURCE_DIRS))

-include $(DEPS_)

endif # __mk_compilation_included

