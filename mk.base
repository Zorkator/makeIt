
ifndef __mk_base_included
__mk_base_included := true

__mk_root := $(dir $(lastword $(MAKEFILE_LIST)))

include  $(__mk_root)mk.log
sinclude $(__mk_root)gmsl/gmsl


#-- set/modify public definitions --

mk_PARAMETERS  += 
mk_CFG_list    +=
mk_TARGET_list += help echo.* eval.* value.*

mk_NULL       :=
mk_SPACE      := $(mk_NULL) #
mk_COMMA      := ,
mk_DOLLAR     := $$
mk_ANY        := %

mk_echo          := /bin/echo -e
mk_lower          = $(shell echo $(1) | tr A-Z a-z)#<                                          mk_lower( sTriNg )                 : string
mk_upper          = $(shell echo $(1) | tr a-z A-Z)#<                                          mk_upper( sTriNg )                 : STRING
mk_csv            = $(subst $(mk_SPACE),$(mk_COMMA),$(strip $1))#<                             mk_csv( v1 v2 ... )                : v1,v2,...
mk_lsv            = $(subst $(mk_SPACE),\\n,$(strip $1))#<                                     mk_lsv( v1 v2 ... )                : 'v1\nv2\n...'
mk_join           = $(subst $(mk_SPACE),$1,$(strip $2))#<                                      mk_join( S, v1 v2 ... )            : 'v1Sv2S...'
mk_ssv            = $(subst $(mk_COMMA),$(mk_SPACE),$(strip $1))#<                             mk_ssv( 'v1,v2,...' )              : 'v1 v2 ...'
mk_reverse        = $(if $1,$(call mk_reverse,$(wordlist 2,$(words $1),$1)) $(firstword $1))#< mk_reverse( v1 v2 ... )            : ... v2 v1
mk_defined        = $(patsubst undefined,,$(origin $1))#<                                      mk_defined( varId )                : origin(varId) | ''
mk_var            = $(if $(call mk_defined,$1),\\$($1),)#<                                     mk_var( varId )                    : \\$(varId) | ''
mk_val            = $(or $($1),$($1_default))#<                                                mk_val( varId )                    : val | default | ''
mk_map            = $(foreach i,$2,$(call $1,$i))#<                                            mk_map( func, v1 v2 ... )          : res1 res2 ...
mk_lines          = $(shell $(mk_echo) "$1" | wc -l)#<                                         mk_lines( string )                 : num of lines

mk_match          = ${shell case $1 in $2) echo '$(value 3)';; *) ;; esac}#<                   mk_match( text, pattern, res )   : res | ''
mk_matchRE        = ${shell if expr $1 : $2 > /dev/null; then echo '$(value 3)'; fi}#<         mk_matchRE( text, re_pattern, res ): res | ''
mk_pattern_opts   = $(foreach p,$($1),$(call mk_match,$2,$p,$($p)))#<                          mk_pattern_opts( PATTERN_list, text )
mk_patternRE_opts = $(foreach p,$($1),$(call mk_matchRE,$2,$p,$($p)))#<                        mk_patternRE_opts( PATTERN_RE_list, text )


#-- targets --

help_doc = print overview over supported parameters and targets
help:
	@$(mk_echo) ' $(TARGET_doc)           \n\n' \
              '== KNOWN CONFIGURATIONS == \n' \
              '$(__cfg_tab)               \n' \
              '== OTHER TARGETS ==        \n' \
              '$(__tgt_tab)               \n' \
              '== CURRENT PARAMETERS ==   \n' \
              '$(__var_tab)'


help.*_doc = echo value of make variable and specify its origin, e.g. make origin.CFG
help.%:
	@$(mk_echo) $* = [$(origin $*)] $($*)


echo.*_doc = evaluate value of make variable 
echo.%:
	@$(mk_echo) "$(subst \n,\\n,$($*))"


eval.*_doc = evaluate a make variable by calling with argument, e.g. make eval._mkFunc,arg
__eval     = $(call $(firstword $1),$(wordlist 2,99,$1))
eval.%:
	@$(mk_echo) '$(subst \n,\\n,$(call __eval,$(call mk_ssv,$*)))'


value.*_doc = show value of make variable
value.%:
	@$(mk_echo) '$(subst \n,\\\\n,$(value $*))'

%/:
	@mkdir -p $@


#-- private definitions --

__var_doc = $(shell printf '%-16s %-12s  %-60s  %s\\n' '$1' '$(subst undefined,default,$(origin $1))' '$($(1)_doc)' '$(subst $$,"$$",$(strip $(mk_$1)))')
__var_tab = $(call mk_map,__var_doc,$(sort $(mk_PARAMETERS)))

__tgt_doc = $(shell printf '%-10s %s\\n' '$1' '$($(1)_doc)')
__tgt_tab = $(call mk_map,__tgt_doc,$(sort $(mk_TARGET_list)))
__cfg_tab = $(call mk_map,__tgt_doc,$(sort $(mk_CFG_list)))

endif # __mk_base_included

